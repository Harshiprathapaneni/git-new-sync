AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for launching a CloudPi AMI with dynamic subdomain naming.

Parameters:
  KeyName:
    Type: String
    #Default: "cloudpi_private_key_202412190906.pem"
    #Default: "cloudpi_private_key_202412310612.pem"
    Default: "cloudpi_private_key_202409201224.pem" #demosever
    Description: The name of the EC2 key pair to access the instance.

  AMIID:
    Type: String
    #Default: "ami-003d3c0137ea7d510"
    Default: "ami-0d791280ef109de8e"
    #Default: "ami-0461cbdfa6e2f1e71"
    #Default: "ami-068e19b2cd6d9f391" # demo server
    #Default: "ami-04339f729f9220553" #DEV SERVER WORKING 
    Description: The ID of the AMI to launch the EC2 instance with.

  InstanceType:
    Type: String
    Default: "t2.2xlarge"
    Description: EC2 instance type for the CloudPi server.

  HostedZoneId:
    Type: String
    Default: "Z02683563R82FW9FQQEON"
    Description: The Route 53 hosted zone ID for your domain.

  DomainName:
    Type: String
    Default: "cloudpie.ai"
    Description: The domain name for subdomains.

Resources:

  # VPC
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: CloudPiVPC

  # Subnet 1 (Public)
  Subnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]

  # Subnet 2 (Public)
  Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]

  # Internet Gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: CloudPiInternetGateway

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: CloudPiRouteTable

  # Route to Internet (0.0.0.0/0)
  Route:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Subnet 1 Route Table Association
  Subnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  # Subnet 2 Route Table Association
  Subnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  # Security Group for EC2 Instance
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable SSH, HTTP, HTTPS, MySQL, Apache Superset, Flask
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Open to all IPs (consider restricting to your IP)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0  # Open to all IPs (consider restricting to your MySQL server IP)
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 587
          ToPort: 587
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5005
          ToPort: 5005
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8088
          ToPort: 8088
          CidrIp: 0.0.0.0/0

  # Elastic IP for the EC2 instance
  ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      InstanceId: !Ref EC2Instance

  SubdomainRecordSet:
      Type: "AWS::Route53::RecordSet"
      Properties:
        HostedZoneId: !Ref HostedZoneId  # Reference HostedZoneId parameter
        Name: !Sub "demo1234.${DomainName}"  # Correctly points to demo123.cloudpie.ai
        Type: "A"
        TTL: "60"
        ResourceRecords:
          - !Ref ElasticIP  # Maps to the Elastic IP of the EC2 instance


  EC2Instance:
    Type: "AWS::EC2::Instance"
    DependsOn: AttachGateway
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AMIID
      NetworkInterfaces:
       - AssociatePublicIpAddress: "true"
         DeviceIndex: 0
         SubnetId: !Ref Subnet1
         GroupSet:
           - !Ref InstanceSecurityGroup

          
Outputs:
  EC2InstancePublicIP:
    Description: "Public IP of the CloudPi EC2 instance"
    Value: !GetAtt EC2Instance.PublicIp

  SubdomainName:
    Description: "The subdomain for the client"
    Value: !Sub "client${EC2Instance.PublicIp}.${DomainName}"
